# Numbers

0;
0.0;
2e4f;
2.2e4;
4dec;

==>

SurrealQL(Int,Float,Float,Float,Decimal)

# Strings

"A string with \"double\" and 'single' quotes";
'A string with "double" and \'single\' quotes';
'A string with new \
line';

==>

SurrealQL(String,String,String)

# Identifiers

theVar;
theVar2;

==>

SurrealQL(Ident,Ident)

# Binary operators

1 + 2;
a âˆˆ z;
x containsnot y;

==>

SurrealQL(
  BinaryExpression(Int,Operator,Int),
  BinaryExpression(Ident,Operator,Ident),
  BinaryExpression(Ident,Operator,Ident))

# Objects

{a: 10};
{block};
{"stringkey": 1, 'single': 2};

==>

SurrealQL(
  Object(BraceOpen,ObjectContent(ObjectProperty(ObjectKey(KeyName),Colon,Int)),BraceClose),
  Block(BraceOpen,Ident,BraceClose),
  Object(BraceOpen,ObjectContent(
    ObjectProperty(ObjectKey(String),Colon,Int),
    ObjectProperty(ObjectKey(String),Colon,Int)
  ),BraceClose))

# Points

(10dec, 20dec)

==>

SurrealQL(Point(Decimal,Decimal))

# Function Calls

a::b();
fn::one::two(1, a);
rand(3);
count(x);
some::versioned::function<1.2.3>(a);

==>

SurrealQL(
  Function(FunctionName,ArgumentList),
  Function(FunctionName,ArgumentList(Int,Ident)),
  Function(FunctionName,ArgumentList(Int)),
  Function(FunctionName,ArgumentList(Ident)),
  Function(FunctionName,Version(VersionNumber),ArgumentList(Ident)))

# Durations

1s 1m 1 h

==>

SurrealQL(Duration(DurationPart,DurationPart,DurationPart))

# JavaScript functions

function(123, 1d2h) {
	const number = 123;
	return number.toString();
}

==>

SurrealQL(
  FunctionJs(
    Int,Duration(DurationPart,DurationPart),
    JavaScriptBlock(BraceOpen,JavaScriptContent,BraceClose)
  )
)

# Literals

true;
true

==>

SurrealQL(Bool,Bool)

# Keyword names in ident position

create bla set true = 1, false = 2, null = 3, none = 4

==>

SurrealQL(CreateStatement(
  Keyword,Ident,
  SetClause( Keyword,
    FieldAssignment(Ident,Operator,Int),
    FieldAssignment(Ident,Operator,Int),
    FieldAssignment(Ident,Operator,Int),
    FieldAssignment(Ident,Operator,Int))))

# Idiom paths

$variable.ident.ident;
record:id.*;
ident->?;
ident->ident;
ident->ident<-ident<->ident;
ident->(? AS ident, ident, ident WHERE ident AS ident);
record:id->ident;
SELECT ->ident FROM ident;
123.to_string();
{}[$variable];
{}[ident];
{}["string"];
record:id[ident];
[][0];
[][$variable];
[][WHERE ident = 123];
[][? ident = 123];

==>

SurrealQL(
  Path(VariableName,Subscript(Ident),Subscript(Ident)),
  Path(RecordId(RecordIdIdent,Colon,RecordIdIdent),Subscript(Any)),
  Path(Ident,GraphPath(GraphRight,Any)),
  Path(Ident,GraphPath(GraphRight,Ident)),
  Path(Ident,GraphPath(GraphRight,Ident),GraphPath(GraphLeft,Ident),GraphPath(GraphBoth,Ident)),
  Path(Ident,GraphPath(GraphRight,GraphPredicate(Any,Keyword,Ident),GraphPredicate(Ident),
    GraphPredicate(Ident,WhereClause(Keyword,Ident),Keyword,Ident))),
  Path(RecordId(RecordIdIdent,Colon,RecordIdIdent),GraphPath(GraphRight,Ident)),
  SelectStatement(Keyword,Predicate(Path(GraphPath(GraphRight,Ident))),Keyword,Ident),
  Path(Int,Subscript(FunctionName,ArgumentList)),
  Path(Block(BraceOpen,BraceClose),Filter("[",VariableName,"]")),
  Path(Block(BraceOpen,BraceClose),Filter("[",Ident,"]")),
  Path(Block(BraceOpen,BraceClose),Filter("[",String,"]")),
  Path(RecordId(RecordIdIdent,Colon,RecordIdIdent),Filter("[",Ident,"]")),
  Path(Array("[","]"),Filter("[",Int,"]")),
  Path(Array("[","]"),Filter("[",VariableName,"]")),
  Path(Array("[","]"),Filter("[",WhereClause(Keyword,BinaryExpression(Ident,Operator,Int)),"]")),
  Path(Array("[","]"),Filter("[",WhereClause(BinaryExpression(Ident,Operator,Int)),"]")))
