# Numbers

0;
0.0;
2e4f;
2.2e4;
4dec;

==>

SurrealQL(Number,Number,Number,Number,Number)

# Strings

"A string with \"double\" and 'single' quotes";
'A string with "double" and \'single\' quotes';
'A string with new \
line';

==>

SurrealQL(String,String,String)

# Identifiers

theVar;
theVar2;

==>

SurrealQL(Ident,Ident)

# Binary operators

1 + 2;
a âˆˆ z;
x containsnot y;

==>

SurrealQL(
  BinaryExpression(Number,Operator,Number),
  BinaryExpression(Ident,Operator,Ident),
  BinaryExpression(Ident,Operator,Ident))

# Objects

{a: 10};
{block};
{"stringkey": 1, 'single': 2};

==>

SurrealQL(
  Object(BraceOpen,ObjectContent(ObjectProperty(ObjectKey(KeyName),Colon,Number)),BraceClose),
  Block(BraceOpen,Ident,BraceClose),
  Object(BraceOpen,ObjectContent(
    ObjectProperty(ObjectKey(String),Colon,Number),
    ObjectProperty(ObjectKey(String),Colon,Number)
  ),BraceClose))

# Points

(10dec, 20dec)

==>

SurrealQL(Point(Number,Number))

# Function Calls

a::b();
fn::one::two(1, a);
rand(3);
count(x);
some::versioned::function<1.2.3>(a);

==>

SurrealQL(
  Function(function),
  Function(function,Number,Ident),
  Function(function,Number),
  Function(function,Ident),
  Function(function,int,int,Ident))

# Durations

1s 1m 1 h

==>

SurrealQL(Duration(DurationPart,DurationPart,DurationPart))

# JavaScript functions

function(123, 1d2h) {
	const number = 123;
	return number.toString();
}

==>

SurrealQL(
  FunctionJs(
    Number,Duration(DurationPart,DurationPart),
    BraceOpen,JavaScript,BraceClose
  )
)

# Literals

true;
true

==>

SurrealQL(Literal,Literal)

# Idiom paths

$variable.ident.ident;
record:id.*;
ident->?;
ident->ident;
ident->ident<-ident<->ident;
ident->(? AS ident, ident, ident WHERE ident AS ident);
record:id->ident;
SELECT ->ident FROM ident;
123.to_string();
{}[$variable];
{}[ident];
{}["string"];
record:id[ident];
[][0];
[][$variable];
[][WHERE ident = 123];
[][? ident = 123];

==>

SurrealQL(
	Variable,Ident,Ident,
	RecordId,Any,
	Ident,GraphTo(Any),
	Ident,GraphTo(Ident),
	Ident,GraphTo(Ident),GraphFrom(Ident),GraphBoth(Ident),
	Ident,GraphTo(Alias(Any,Keyword,Ident),Ident,Alias(Filter(Ident,Keyword,Ident),Keyword,Ident)),
	RecordId,GraphTo(Ident),
	SelectStatement(
		Keyword,
		InclusivePredicate(Predicate(GraphTo(Ident))),
		Keyword,
		Ident
	)
	Number,Function(function),
	Object,Filter(Variable),
	Object,Filter(Ident),
	Object,Filter(String),
	RecordId,Filter(Ident),
	Array,Filter(Number),
	Array,Filter(Variable),
	Array,Filter(Keyword,BinaryExpression(Ident,operator,Number)),
	Array,Filter(Keyword,BinaryExpression(Ident,operator,Number))
)
